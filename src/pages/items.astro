---
import Layout from '../layouts/Layout.astro';
import { verifyAuth, redirectToLogin } from '../utils/auth';

// Check for authentication
const isAuthenticated = verifyAuth(Astro.request);
if (!isAuthenticated) {
  return redirectToLogin();
}

// Get all items from the database
let items = [];
try {
  // Access the Cloudflare D1 database
  // The database is accessed from runtime.env.DB
  const db = Astro.locals?.runtime?.env?.DB;
  if (db) {
    // First ensure the table exists
    await db.prepare(`
      CREATE TABLE IF NOT EXISTS items (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        description TEXT
      )
    `).run();
    
    // Then fetch the items
    const response = await db.prepare("SELECT * FROM items").all();
    items = response.results || [];
  } else {
    console.error('Database not available in Astro.locals.runtime.env');
  }
} catch (error) {
  console.error('Error fetching items:', error);
}

// Get the auth parameter for passing to API calls
const authParam = new URL(Astro.request.url).searchParams.get('auth') || '';
---

<Layout title="Items Manager">
  <div class="max-w-6xl mx-auto p-4 sm:p-6 lg:p-8">
    <header class="bg-white shadow rounded-lg mb-6 p-4">
      <h1 class="text-3xl font-bold text-gray-800">Items Manager</h1>
      <p class="text-gray-600">Manage your items database</p>
      <div class="flex justify-between mt-2">
        <a href={`/?auth=${authParam}`} class="inline-block text-indigo-600 hover:text-indigo-800">‚Üê Back to Home</a>
        <a href="/login" class="inline-block text-red-600 hover:text-red-800">Logout</a>
      </div>
    </header>

    <!-- Add Item Form -->
    <div class="bg-white shadow rounded-lg mb-6 p-4">
      <h2 class="text-xl font-semibold text-gray-800 mb-4">Add New Item</h2>
      <form id="itemForm" class="space-y-4">
        <div>
          <label for="name" class="block text-sm font-medium text-gray-700">Name</label>
          <input type="text" id="name" name="name" required 
            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
        </div>
        <div>
          <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
          <textarea id="description" name="description" rows="3" 
            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"></textarea>
        </div>
        <div class="flex justify-end">
          <button type="submit" 
            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            Add Item
          </button>
        </div>
      </form>
    </div>

    <!-- Items List -->
    <div class="bg-white shadow rounded-lg">
      <h2 class="text-xl font-semibold text-gray-800 p-4 border-b">Items List</h2>
      
      <div id="itemsList" class="divide-y divide-gray-200">
        {items.map((item: any) => (
          <div class="item-row p-4 flex justify-between items-start hover:bg-gray-50" data-id={item.id}>
            <div>
              <h3 class="text-lg font-medium text-gray-900">{item.name}</h3>
              <p class="mt-1 text-sm text-gray-600">{item.description}</p>
            </div>
            <div class="flex space-x-2">
              <button class="edit-btn px-3 py-1 bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200 text-sm">
                Edit
              </button>
              <button class="delete-btn px-3 py-1 bg-red-100 text-red-700 rounded-md hover:bg-red-200 text-sm">
                Delete
              </button>
            </div>
          </div>
        ))}
        {items.length === 0 && (
          <div class="p-4 text-center text-gray-500">
            No items found. Add your first item above.
          </div>
        )}
      </div>
    </div>

    <!-- Edit Modal -->
    <div id="editModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full">
      <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Edit Item</h3>
        <form id="editForm" class="space-y-4">
          <input type="hidden" id="editId">
          <div>
            <label for="editName" class="block text-sm font-medium text-gray-700">Name</label>
            <input type="text" id="editName" name="editName" required 
              class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
          </div>
          <div>
            <label for="editDescription" class="block text-sm font-medium text-gray-700">Description</label>
            <textarea id="editDescription" name="editDescription" rows="3" 
              class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"></textarea>
          </div>
          <div class="flex justify-between">
            <button type="button" id="cancelEdit"
              class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
              Cancel
            </button>
            <button type="submit"
              class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
              Save Changes
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast" class="hidden fixed bottom-4 right-4 px-4 py-3 rounded-md text-white transition-opacity"></div>
  </div>

  <script define:vars={{ authParam }}>
    // DOM Elements
    const itemForm = document.getElementById('itemForm') as HTMLFormElement;
    const itemsList = document.getElementById('itemsList');
    const editModal = document.getElementById('editModal');
    const editForm = document.getElementById('editForm') as HTMLFormElement;
    const editId = document.getElementById('editId') as HTMLInputElement;
    const editName = document.getElementById('editName') as HTMLInputElement;
    const editDescription = document.getElementById('editDescription') as HTMLTextAreaElement;
    const cancelEdit = document.getElementById('cancelEdit');
    const toast = document.getElementById('toast');

    // Authentication headers for API calls
    const authHeaders = {
      'Authorization': `Bearer ${authParam}`,
      'Content-Type': 'application/json'
    };

    // Show Toast Notification
    function showToast(message: string, isError = false) {
      if (toast) {
        toast.textContent = message;
        toast.className = `fixed bottom-4 right-4 px-4 py-3 rounded-md text-white ${isError ? 'bg-red-600' : 'bg-green-600'}`;
        toast.classList.remove('hidden');
        
        setTimeout(() => {
          toast?.classList.add('hidden');
        }, 3000);
      }
    }

    // Fetch all items
    async function fetchItems() {
      try {
        const response = await fetch('/api/items', {
          headers: authHeaders
        });
        
        // Check for authentication error
        if (response.status === 401) {
          window.location.href = '/login?error=true';
          return;
        }
        
        const data = await response.json();
        
        if (data.success) {
          renderItems(data.data);
        } else {
          showToast('Failed to fetch items', true);
        }
      } catch (error) {
        if (error instanceof Error) {
          showToast('Error fetching items: ' + error.message, true);
        } else {
          showToast('Error fetching items', true);
        }
      }
    }

    // Render items to the list
    function renderItems(items: any[]) {
      // Clear current items
      if (!itemsList) return;
      
      itemsList.innerHTML = '';
      
      if (items.length === 0) {
        itemsList.innerHTML = `
          <div class="p-4 text-center text-gray-500">
            No items found. Add your first item above.
          </div>
        `;
        return;
      }
      
      // Add each item to the list
      items.forEach(item => {
        const itemElement = document.createElement('div');
        itemElement.className = 'item-row p-4 flex justify-between items-start hover:bg-gray-50';
        itemElement.dataset.id = String(item.id);
        
        itemElement.innerHTML = `
          <div>
            <h3 class="text-lg font-medium text-gray-900">${item.name}</h3>
            <p class="mt-1 text-sm text-gray-600">${item.description || ''}</p>
          </div>
          <div class="flex space-x-2">
            <button class="edit-btn px-3 py-1 bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200 text-sm">
              Edit
            </button>
            <button class="delete-btn px-3 py-1 bg-red-100 text-red-700 rounded-md hover:bg-red-200 text-sm">
              Delete
            </button>
          </div>
        `;
        
        itemsList.appendChild(itemElement);
      });
      
      // Re-attach event listeners
      attachItemEventListeners();
    }

    // Attach event listeners to items
    function attachItemEventListeners() {
      // Edit buttons
      document.querySelectorAll('.edit-btn').forEach(button => {
        button.addEventListener('click', function(this: HTMLElement) {
          const itemRow = this.closest('.item-row');
          if (!itemRow) return;
          
          const id = itemRow.dataset.id;
          const nameEl = itemRow.querySelector('h3');
          const descEl = itemRow.querySelector('p');
          
          if (!id || !nameEl || !descEl || !editId || !editName || !editDescription || !editModal) return;
          
          // Populate the edit form
          editId.value = id;
          editName.value = nameEl.textContent || '';
          editDescription.value = descEl.textContent || '';
          
          // Show the modal
          editModal.classList.remove('hidden');
        });
      });
      
      // Delete buttons
      document.querySelectorAll('.delete-btn').forEach(button => {
        button.addEventListener('click', async function(this: HTMLElement) {
          if (confirm('Are you sure you want to delete this item?')) {
            const itemRow = this.closest('.item-row');
            if (!itemRow) return;
            
            const id = itemRow.dataset.id;
            if (!id) return;
            
            try {
              const response = await fetch(`/api/items?id=${id}`, {
                method: 'DELETE',
                headers: authHeaders
              });
              
              // Handle authentication errors
              if (response.status === 401) {
                window.location.href = '/login?error=true';
                return;
              }
              
              const data = await response.json();
              
              if (data.success) {
                showToast('Item deleted successfully');
                fetchItems(); // Refresh the list
              } else {
                showToast('Failed to delete item: ' + data.error, true);
              }
            } catch (error) {
              if (error instanceof Error) {
                showToast('Error deleting item: ' + error.message, true);
              } else {
                showToast('Error deleting item', true);
              }
            }
          }
        });
      });
    }

    // Add Item
    if (itemForm) {
      itemForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const nameInput = document.getElementById('name') as HTMLInputElement;
        const descriptionInput = document.getElementById('description') as HTMLTextAreaElement;
        
        if (!nameInput || !descriptionInput) return;
        
        const name = nameInput.value;
        const description = descriptionInput.value;
        
        try {
          const response = await fetch('/api/items', {
            method: 'POST',
            headers: authHeaders,
            body: JSON.stringify({ name, description })
          });
          
          // Handle authentication errors
          if (response.status === 401) {
            window.location.href = '/login?error=true';
            return;
          }
          
          const data = await response.json();
          
          if (data.success) {
            showToast('Item added successfully');
            itemForm.reset();
            fetchItems(); // Refresh the list
          } else {
            showToast('Failed to add item: ' + data.error, true);
          }
        } catch (error) {
          if (error instanceof Error) {
            showToast('Error adding item: ' + error.message, true);
          } else {
            showToast('Error adding item', true);
          }
        }
      });
    }

    // Edit Item
    if (editForm) {
      editForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        if (!editId || !editName || !editDescription || !editModal) return;
        
        const id = editId.value;
        const name = editName.value;
        const description = editDescription.value;
        
        try {
          const response = await fetch('/api/items', {
            method: 'PUT',
            headers: authHeaders,
            body: JSON.stringify({ id: parseInt(id), name, description })
          });
          
          // Handle authentication errors
          if (response.status === 401) {
            window.location.href = '/login?error=true';
            return;
          }
          
          const data = await response.json();
          
          if (data.success) {
            showToast('Item updated successfully');
            editModal.classList.add('hidden');
            fetchItems(); // Refresh the list
          } else {
            showToast('Failed to update item: ' + data.error, true);
          }
        } catch (error) {
          if (error instanceof Error) {
            showToast('Error updating item: ' + error.message, true);
          } else {
            showToast('Error updating item', true);
          }
        }
      });
    }

    // Cancel Edit
    if (cancelEdit && editModal) {
      cancelEdit.addEventListener('click', function() {
        editModal.classList.add('hidden');
      });
    }

    // Close modal when clicking outside
    if (editModal) {
      editModal.addEventListener('click', function(e) {
        if (e.target === editModal) {
          editModal.classList.add('hidden');
        }
      });
    }

    // Initial fetch of items on page load
    document.addEventListener('DOMContentLoaded', function() {
      fetchItems();
    });
  </script>
</Layout> 